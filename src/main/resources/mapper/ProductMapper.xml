<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cosine.demo.dao.ProductDao">
    <resultMap id="BaseResultMap" type="com.cosine.demo.domain.Product">
        <result column="product_id" property="productId" />
        <result column="name" property="name" />
        <result column="price" property="price" />
        <result column="item_id" property="itemId" />
        <result column="create_time" property="createTime" />
        <result column="create_factory" property="createFactory" />
        <result column="status" property="status" />
        <result column="version" property="version" />
    </resultMap>

    <resultMap id="ProductDTOResultMap" type="com.cosine.demo.dto.ProductDTO">
        <result column="product_id" property="productId" />
        <result column="name" property="name" />
        <result column="price" property="price" />
        <result column="item_id" property="itemId" />
        <result column="create_factory" property="createFactory" />
    </resultMap>

    <sql id="Base_Column_List">
        product_id, name, price, item_id, create_time, create_factory, status, version
    </sql>

    <insert id="insert" parameterType="com.cosine.demo.domain.Product">
        insert into product(product_id, name, price, item_id, create_time, create_factory, status, version) values (#{productId}, #{name}, #{price}, #{itemId}, #{createTime}, #{createFactory}, 0, 0)
    </insert>

    <select id="findAllByPage" resultMap="ProductDTOResultMap">
        select product_id, name, price, item_id, create_factory from product where status = 0
    </select>

    <update id="updateStatus">
        update product set status = 1, version = version + 1 where item_id = #{itemId} and status = 0 limit #{number}
    </update>

    <select id="searchProduct" parameterType="arraylist" resultType="int">
        select count(product_id) from product where status = 0
        <if test="productIdList != null and productIdList.size() != 0">
            and product_id in
            <foreach collection="productIdList" item="value" separator="," open="(" close=")">
                #{value}
            </foreach>
        </if>

    </select>

    <select id="updateStatusById" parameterType="arraylist" resultType="integer">
        update product set status = 1, version = version + 1 where status = 0
        <if test="productIdList != null and productIdList.size() != 0">
            and product_id in
            <foreach collection="productIdList" item="value" separator="," open="(" close=")">
                #{value}
            </foreach>
        </if>

    </select>

    <select id="findProductsByIds" parameterType="arraylist" resultMap="ProductDTOResultMap">
        select product_id, name, price, item_id, create_factory from product where status = 0
        <if test="productIdList != null and productIdList.size() != 0">
            and product_id in
            <foreach collection="productIdList" item="value" separator="," open="(" close=")">
                #{value}
            </foreach>
        </if>
    </select>

</mapper>